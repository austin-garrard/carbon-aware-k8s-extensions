/*
 * CarbonAware.WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package caapi

import (
	"encoding/json"
	"time"
)

// EmissionsForecastDTO struct for EmissionsForecastDTO
type EmissionsForecastDTO struct {
	// For current requests, this value is the timestamp the request for forecast data was made.  For historical forecast requests, this value is the timestamp used to access the most   recently generated forecast as of that time.
	RequestedAt time.Time `json:"requestedAt"`
	// The location of the forecast
	Location string `json:"location"`
	// Start time boundary of forecasted data points. Ignores forecast data points before this time.  Defaults to the earliest time in the forecast data.
	DataStartAt *time.Time `json:"dataStartAt,omitempty"`
	// End time boundary of forecasted data points. Ignores forecast data points after this time.  Defaults to the latest time in the forecast data.
	DataEndAt *time.Time `json:"dataEndAt,omitempty"`
	// The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.
	WindowSize *int32 `json:"windowSize,omitempty"`
	// Timestamp when the forecast was generated.
	GeneratedAt *time.Time `json:"generatedAt,omitempty"`
	// The optimal forecasted data points within the 'forecastData' array.  Returns empty array if 'forecastData' array is empty.
	OptimalDataPoints []EmissionsDataDTO `json:"optimalDataPoints,omitempty"`
	// The forecasted data points transformed and filtered to reflect the specified time and window parameters.  Points are ordered chronologically; Empty array if all data points were filtered out.  E.G. dataStartAt and dataEndAt times outside the forecast period; windowSize greater than total duration of forecast data;
	ForecastData []EmissionsDataDTO `json:"forecastData,omitempty"`
}

// NewEmissionsForecastDTO instantiates a new EmissionsForecastDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionsForecastDTO(requestedAt time.Time, location string, ) *EmissionsForecastDTO {
	this := EmissionsForecastDTO{}
	this.RequestedAt = requestedAt
	this.Location = location
	return &this
}

// NewEmissionsForecastDTOWithDefaults instantiates a new EmissionsForecastDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionsForecastDTOWithDefaults() *EmissionsForecastDTO {
	this := EmissionsForecastDTO{}
	return &this
}

// GetRequestedAt returns the RequestedAt field value
func (o *EmissionsForecastDTO) GetRequestedAt() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RequestedAt, true
}

// SetRequestedAt sets field value
func (o *EmissionsForecastDTO) SetRequestedAt(v time.Time) {
	o.RequestedAt = v
}

// GetLocation returns the Location field value
func (o *EmissionsForecastDTO) GetLocation() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *EmissionsForecastDTO) SetLocation(v string) {
	o.Location = v
}

// GetDataStartAt returns the DataStartAt field value if set, zero value otherwise.
func (o *EmissionsForecastDTO) GetDataStartAt() time.Time {
	if o == nil || o.DataStartAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DataStartAt
}

// GetDataStartAtOk returns a tuple with the DataStartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetDataStartAtOk() (*time.Time, bool) {
	if o == nil || o.DataStartAt == nil {
		return nil, false
	}
	return o.DataStartAt, true
}

// HasDataStartAt returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasDataStartAt() bool {
	if o != nil && o.DataStartAt != nil {
		return true
	}

	return false
}

// SetDataStartAt gets a reference to the given time.Time and assigns it to the DataStartAt field.
func (o *EmissionsForecastDTO) SetDataStartAt(v time.Time) {
	o.DataStartAt = &v
}

// GetDataEndAt returns the DataEndAt field value if set, zero value otherwise.
func (o *EmissionsForecastDTO) GetDataEndAt() time.Time {
	if o == nil || o.DataEndAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DataEndAt
}

// GetDataEndAtOk returns a tuple with the DataEndAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetDataEndAtOk() (*time.Time, bool) {
	if o == nil || o.DataEndAt == nil {
		return nil, false
	}
	return o.DataEndAt, true
}

// HasDataEndAt returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasDataEndAt() bool {
	if o != nil && o.DataEndAt != nil {
		return true
	}

	return false
}

// SetDataEndAt gets a reference to the given time.Time and assigns it to the DataEndAt field.
func (o *EmissionsForecastDTO) SetDataEndAt(v time.Time) {
	o.DataEndAt = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *EmissionsForecastDTO) GetWindowSize() int32 {
	if o == nil || o.WindowSize == nil {
		var ret int32
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetWindowSizeOk() (*int32, bool) {
	if o == nil || o.WindowSize == nil {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasWindowSize() bool {
	if o != nil && o.WindowSize != nil {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given int32 and assigns it to the WindowSize field.
func (o *EmissionsForecastDTO) SetWindowSize(v int32) {
	o.WindowSize = &v
}

// GetGeneratedAt returns the GeneratedAt field value if set, zero value otherwise.
func (o *EmissionsForecastDTO) GetGeneratedAt() time.Time {
	if o == nil || o.GeneratedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.GeneratedAt
}

// GetGeneratedAtOk returns a tuple with the GeneratedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastDTO) GetGeneratedAtOk() (*time.Time, bool) {
	if o == nil || o.GeneratedAt == nil {
		return nil, false
	}
	return o.GeneratedAt, true
}

// HasGeneratedAt returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasGeneratedAt() bool {
	if o != nil && o.GeneratedAt != nil {
		return true
	}

	return false
}

// SetGeneratedAt gets a reference to the given time.Time and assigns it to the GeneratedAt field.
func (o *EmissionsForecastDTO) SetGeneratedAt(v time.Time) {
	o.GeneratedAt = &v
}

// GetOptimalDataPoints returns the OptimalDataPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmissionsForecastDTO) GetOptimalDataPoints() []EmissionsDataDTO {
	if o == nil  {
		var ret []EmissionsDataDTO
		return ret
	}
	return o.OptimalDataPoints
}

// GetOptimalDataPointsOk returns a tuple with the OptimalDataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmissionsForecastDTO) GetOptimalDataPointsOk() (*[]EmissionsDataDTO, bool) {
	if o == nil || o.OptimalDataPoints == nil {
		return nil, false
	}
	return &o.OptimalDataPoints, true
}

// HasOptimalDataPoints returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasOptimalDataPoints() bool {
	if o != nil && o.OptimalDataPoints != nil {
		return true
	}

	return false
}

// SetOptimalDataPoints gets a reference to the given []EmissionsDataDTO and assigns it to the OptimalDataPoints field.
func (o *EmissionsForecastDTO) SetOptimalDataPoints(v []EmissionsDataDTO) {
	o.OptimalDataPoints = v
}

// GetForecastData returns the ForecastData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmissionsForecastDTO) GetForecastData() []EmissionsDataDTO {
	if o == nil  {
		var ret []EmissionsDataDTO
		return ret
	}
	return o.ForecastData
}

// GetForecastDataOk returns a tuple with the ForecastData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmissionsForecastDTO) GetForecastDataOk() (*[]EmissionsDataDTO, bool) {
	if o == nil || o.ForecastData == nil {
		return nil, false
	}
	return &o.ForecastData, true
}

// HasForecastData returns a boolean if a field has been set.
func (o *EmissionsForecastDTO) HasForecastData() bool {
	if o != nil && o.ForecastData != nil {
		return true
	}

	return false
}

// SetForecastData gets a reference to the given []EmissionsDataDTO and assigns it to the ForecastData field.
func (o *EmissionsForecastDTO) SetForecastData(v []EmissionsDataDTO) {
	o.ForecastData = v
}

func (o EmissionsForecastDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if true {
		toSerialize["location"] = o.Location
	}
	if o.DataStartAt != nil {
		toSerialize["dataStartAt"] = o.DataStartAt
	}
	if o.DataEndAt != nil {
		toSerialize["dataEndAt"] = o.DataEndAt
	}
	if o.WindowSize != nil {
		toSerialize["windowSize"] = o.WindowSize
	}
	if o.GeneratedAt != nil {
		toSerialize["generatedAt"] = o.GeneratedAt
	}
	if o.OptimalDataPoints != nil {
		toSerialize["optimalDataPoints"] = o.OptimalDataPoints
	}
	if o.ForecastData != nil {
		toSerialize["forecastData"] = o.ForecastData
	}
	return json.Marshal(toSerialize)
}

type NullableEmissionsForecastDTO struct {
	value *EmissionsForecastDTO
	isSet bool
}

func (v NullableEmissionsForecastDTO) Get() *EmissionsForecastDTO {
	return v.value
}

func (v *NullableEmissionsForecastDTO) Set(val *EmissionsForecastDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionsForecastDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionsForecastDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionsForecastDTO(val *EmissionsForecastDTO) *NullableEmissionsForecastDTO {
	return &NullableEmissionsForecastDTO{value: val, isSet: true}
}

func (v NullableEmissionsForecastDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionsForecastDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


