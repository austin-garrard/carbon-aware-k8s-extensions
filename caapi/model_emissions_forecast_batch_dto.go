/*
 * CarbonAware.WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package caapi

import (
	"encoding/json"
	"time"
)

// EmissionsForecastBatchDTO struct for EmissionsForecastBatchDTO
type EmissionsForecastBatchDTO struct {
	// For historical forecast requests, this value is the timestamp used to access the most  recently generated forecast as of that time.
	RequestedAt time.Time `json:"requestedAt"`
	// Start time boundary of forecasted data points. Ignores forecast data points before this time.  Defaults to the earliest time in the forecast data.
	DataStartAt *time.Time `json:"dataStartAt,omitempty"`
	// End time boundary of forecasted data points. Ignores forecast data points after this time.  Defaults to the latest time in the forecast data.
	DataEndAt *time.Time `json:"dataEndAt,omitempty"`
	// The estimated duration (in minutes) of the workload.  Defaults to the duration of a single forecast data point.
	WindowSize *int32 `json:"windowSize,omitempty"`
	// The location of the forecast
	Location string `json:"location"`
}

// NewEmissionsForecastBatchDTO instantiates a new EmissionsForecastBatchDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionsForecastBatchDTO(requestedAt time.Time, location string) *EmissionsForecastBatchDTO {
	this := EmissionsForecastBatchDTO{}
	this.RequestedAt = requestedAt
	this.Location = location
	return &this
}

// NewEmissionsForecastBatchDTOWithDefaults instantiates a new EmissionsForecastBatchDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionsForecastBatchDTOWithDefaults() *EmissionsForecastBatchDTO {
	this := EmissionsForecastBatchDTO{}
	return &this
}

// GetRequestedAt returns the RequestedAt field value
func (o *EmissionsForecastBatchDTO) GetRequestedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.RequestedAt
}

// GetRequestedAtOk returns a tuple with the RequestedAt field value
// and a boolean to check if the value has been set.
func (o *EmissionsForecastBatchDTO) GetRequestedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RequestedAt, true
}

// SetRequestedAt sets field value
func (o *EmissionsForecastBatchDTO) SetRequestedAt(v time.Time) {
	o.RequestedAt = v
}

// GetDataStartAt returns the DataStartAt field value if set, zero value otherwise.
func (o *EmissionsForecastBatchDTO) GetDataStartAt() time.Time {
	if o == nil || o.DataStartAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DataStartAt
}

// GetDataStartAtOk returns a tuple with the DataStartAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastBatchDTO) GetDataStartAtOk() (*time.Time, bool) {
	if o == nil || o.DataStartAt == nil {
		return nil, false
	}
	return o.DataStartAt, true
}

// HasDataStartAt returns a boolean if a field has been set.
func (o *EmissionsForecastBatchDTO) HasDataStartAt() bool {
	if o != nil && o.DataStartAt != nil {
		return true
	}

	return false
}

// SetDataStartAt gets a reference to the given time.Time and assigns it to the DataStartAt field.
func (o *EmissionsForecastBatchDTO) SetDataStartAt(v time.Time) {
	o.DataStartAt = &v
}

// GetDataEndAt returns the DataEndAt field value if set, zero value otherwise.
func (o *EmissionsForecastBatchDTO) GetDataEndAt() time.Time {
	if o == nil || o.DataEndAt == nil {
		var ret time.Time
		return ret
	}
	return *o.DataEndAt
}

// GetDataEndAtOk returns a tuple with the DataEndAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastBatchDTO) GetDataEndAtOk() (*time.Time, bool) {
	if o == nil || o.DataEndAt == nil {
		return nil, false
	}
	return o.DataEndAt, true
}

// HasDataEndAt returns a boolean if a field has been set.
func (o *EmissionsForecastBatchDTO) HasDataEndAt() bool {
	if o != nil && o.DataEndAt != nil {
		return true
	}

	return false
}

// SetDataEndAt gets a reference to the given time.Time and assigns it to the DataEndAt field.
func (o *EmissionsForecastBatchDTO) SetDataEndAt(v time.Time) {
	o.DataEndAt = &v
}

// GetWindowSize returns the WindowSize field value if set, zero value otherwise.
func (o *EmissionsForecastBatchDTO) GetWindowSize() int32 {
	if o == nil || o.WindowSize == nil {
		var ret int32
		return ret
	}
	return *o.WindowSize
}

// GetWindowSizeOk returns a tuple with the WindowSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsForecastBatchDTO) GetWindowSizeOk() (*int32, bool) {
	if o == nil || o.WindowSize == nil {
		return nil, false
	}
	return o.WindowSize, true
}

// HasWindowSize returns a boolean if a field has been set.
func (o *EmissionsForecastBatchDTO) HasWindowSize() bool {
	if o != nil && o.WindowSize != nil {
		return true
	}

	return false
}

// SetWindowSize gets a reference to the given int32 and assigns it to the WindowSize field.
func (o *EmissionsForecastBatchDTO) SetWindowSize(v int32) {
	o.WindowSize = &v
}

// GetLocation returns the Location field value
func (o *EmissionsForecastBatchDTO) GetLocation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *EmissionsForecastBatchDTO) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *EmissionsForecastBatchDTO) SetLocation(v string) {
	o.Location = v
}

func (o EmissionsForecastBatchDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["requestedAt"] = o.RequestedAt
	}
	if o.DataStartAt != nil {
		toSerialize["dataStartAt"] = o.DataStartAt
	}
	if o.DataEndAt != nil {
		toSerialize["dataEndAt"] = o.DataEndAt
	}
	if o.WindowSize != nil {
		toSerialize["windowSize"] = o.WindowSize
	}
	if true {
		toSerialize["location"] = o.Location
	}
	return json.Marshal(toSerialize)
}

type NullableEmissionsForecastBatchDTO struct {
	value *EmissionsForecastBatchDTO
	isSet bool
}

func (v NullableEmissionsForecastBatchDTO) Get() *EmissionsForecastBatchDTO {
	return v.value
}

func (v *NullableEmissionsForecastBatchDTO) Set(val *EmissionsForecastBatchDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionsForecastBatchDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionsForecastBatchDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionsForecastBatchDTO(val *EmissionsForecastBatchDTO) *NullableEmissionsForecastBatchDTO {
	return &NullableEmissionsForecastBatchDTO{value: val, isSet: true}
}

func (v NullableEmissionsForecastBatchDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionsForecastBatchDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
