/*
 * CarbonAware.WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package caapi

import (
	"encoding/json"
	"time"
)

// EmissionsData struct for EmissionsData
type EmissionsData struct {
	Location NullableString `json:"location,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	Rating *float64 `json:"rating,omitempty"`
	Duration *string `json:"duration,omitempty"`
}

// NewEmissionsData instantiates a new EmissionsData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmissionsData() *EmissionsData {
	this := EmissionsData{}
	return &this
}

// NewEmissionsDataWithDefaults instantiates a new EmissionsData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmissionsDataWithDefaults() *EmissionsData {
	this := EmissionsData{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmissionsData) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmissionsData) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *EmissionsData) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *EmissionsData) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *EmissionsData) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *EmissionsData) UnsetLocation() {
	o.Location.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *EmissionsData) GetTime() time.Time {
	if o == nil || o.Time == nil {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsData) GetTimeOk() (*time.Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *EmissionsData) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *EmissionsData) SetTime(v time.Time) {
	o.Time = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *EmissionsData) GetRating() float64 {
	if o == nil || o.Rating == nil {
		var ret float64
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsData) GetRatingOk() (*float64, bool) {
	if o == nil || o.Rating == nil {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *EmissionsData) HasRating() bool {
	if o != nil && o.Rating != nil {
		return true
	}

	return false
}

// SetRating gets a reference to the given float64 and assigns it to the Rating field.
func (o *EmissionsData) SetRating(v float64) {
	o.Rating = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *EmissionsData) GetDuration() string {
	if o == nil || o.Duration == nil {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmissionsData) GetDurationOk() (*string, bool) {
	if o == nil || o.Duration == nil {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *EmissionsData) HasDuration() bool {
	if o != nil && o.Duration != nil {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *EmissionsData) SetDuration(v string) {
	o.Duration = &v
}

func (o EmissionsData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	if o.Rating != nil {
		toSerialize["rating"] = o.Rating
	}
	if o.Duration != nil {
		toSerialize["duration"] = o.Duration
	}
	return json.Marshal(toSerialize)
}

type NullableEmissionsData struct {
	value *EmissionsData
	isSet bool
}

func (v NullableEmissionsData) Get() *EmissionsData {
	return v.value
}

func (v *NullableEmissionsData) Set(val *EmissionsData) {
	v.value = val
	v.isSet = true
}

func (v NullableEmissionsData) IsSet() bool {
	return v.isSet
}

func (v *NullableEmissionsData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmissionsData(val *EmissionsData) *NullableEmissionsData {
	return &NullableEmissionsData{value: val, isSet: true}
}

func (v NullableEmissionsData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmissionsData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


