/*
 * CarbonAware.WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package caapi

import (
	"encoding/json"
	"time"
)

// CarbonIntensityDTO struct for CarbonIntensityDTO
type CarbonIntensityDTO struct {
	// the location name where workflow is run
	Location string `json:"location"`
	// the time at which the workflow we are measuring carbon intensity for started
	StartTime time.Time `json:"startTime"`
	// the time at which the workflow we are measuring carbon intensity for ended
	EndTime time.Time `json:"endTime"`
	// Value of the marginal carbon intensity in grams per kilowatt-hour.
	CarbonIntensity *float64 `json:"carbonIntensity,omitempty"`
}

// NewCarbonIntensityDTO instantiates a new CarbonIntensityDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarbonIntensityDTO(location string, startTime time.Time, endTime time.Time, ) *CarbonIntensityDTO {
	this := CarbonIntensityDTO{}
	this.Location = location
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewCarbonIntensityDTOWithDefaults instantiates a new CarbonIntensityDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarbonIntensityDTOWithDefaults() *CarbonIntensityDTO {
	this := CarbonIntensityDTO{}
	return &this
}

// GetLocation returns the Location field value
func (o *CarbonIntensityDTO) GetLocation() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityDTO) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CarbonIntensityDTO) SetLocation(v string) {
	o.Location = v
}

// GetStartTime returns the StartTime field value
func (o *CarbonIntensityDTO) GetStartTime() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityDTO) GetStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CarbonIntensityDTO) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *CarbonIntensityDTO) GetEndTime() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityDTO) GetEndTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *CarbonIntensityDTO) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetCarbonIntensity returns the CarbonIntensity field value if set, zero value otherwise.
func (o *CarbonIntensityDTO) GetCarbonIntensity() float64 {
	if o == nil || o.CarbonIntensity == nil {
		var ret float64
		return ret
	}
	return *o.CarbonIntensity
}

// GetCarbonIntensityOk returns a tuple with the CarbonIntensity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CarbonIntensityDTO) GetCarbonIntensityOk() (*float64, bool) {
	if o == nil || o.CarbonIntensity == nil {
		return nil, false
	}
	return o.CarbonIntensity, true
}

// HasCarbonIntensity returns a boolean if a field has been set.
func (o *CarbonIntensityDTO) HasCarbonIntensity() bool {
	if o != nil && o.CarbonIntensity != nil {
		return true
	}

	return false
}

// SetCarbonIntensity gets a reference to the given float64 and assigns it to the CarbonIntensity field.
func (o *CarbonIntensityDTO) SetCarbonIntensity(v float64) {
	o.CarbonIntensity = &v
}

func (o CarbonIntensityDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["endTime"] = o.EndTime
	}
	if o.CarbonIntensity != nil {
		toSerialize["carbonIntensity"] = o.CarbonIntensity
	}
	return json.Marshal(toSerialize)
}

type NullableCarbonIntensityDTO struct {
	value *CarbonIntensityDTO
	isSet bool
}

func (v NullableCarbonIntensityDTO) Get() *CarbonIntensityDTO {
	return v.value
}

func (v *NullableCarbonIntensityDTO) Set(val *CarbonIntensityDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCarbonIntensityDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCarbonIntensityDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarbonIntensityDTO(val *CarbonIntensityDTO) *NullableCarbonIntensityDTO {
	return &NullableCarbonIntensityDTO{value: val, isSet: true}
}

func (v NullableCarbonIntensityDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarbonIntensityDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


