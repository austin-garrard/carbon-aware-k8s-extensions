/*
 * CarbonAware.WebApi, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package caapi

import (
	"encoding/json"
	"time"
)

// CarbonIntensityBatchDTO struct for CarbonIntensityBatchDTO
type CarbonIntensityBatchDTO struct {
	// the location name where workflow is run
	Location string `json:"location"`
	// the time at which the workflow we are measuring carbon intensity for started
	StartTime time.Time `json:"startTime"`
	// the time at which the workflow we are measuring carbon intensity for ended
	EndTime time.Time `json:"endTime"`
}

// NewCarbonIntensityBatchDTO instantiates a new CarbonIntensityBatchDTO object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCarbonIntensityBatchDTO(location string, startTime time.Time, endTime time.Time, ) *CarbonIntensityBatchDTO {
	this := CarbonIntensityBatchDTO{}
	this.Location = location
	this.StartTime = startTime
	this.EndTime = endTime
	return &this
}

// NewCarbonIntensityBatchDTOWithDefaults instantiates a new CarbonIntensityBatchDTO object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCarbonIntensityBatchDTOWithDefaults() *CarbonIntensityBatchDTO {
	this := CarbonIntensityBatchDTO{}
	return &this
}

// GetLocation returns the Location field value
func (o *CarbonIntensityBatchDTO) GetLocation() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.Location
}

// GetLocationOk returns a tuple with the Location field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityBatchDTO) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Location, true
}

// SetLocation sets field value
func (o *CarbonIntensityBatchDTO) SetLocation(v string) {
	o.Location = v
}

// GetStartTime returns the StartTime field value
func (o *CarbonIntensityBatchDTO) GetStartTime() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityBatchDTO) GetStartTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *CarbonIntensityBatchDTO) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *CarbonIntensityBatchDTO) GetEndTime() time.Time {
	if o == nil  {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *CarbonIntensityBatchDTO) GetEndTimeOk() (*time.Time, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *CarbonIntensityBatchDTO) SetEndTime(v time.Time) {
	o.EndTime = v
}

func (o CarbonIntensityBatchDTO) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["location"] = o.Location
	}
	if true {
		toSerialize["startTime"] = o.StartTime
	}
	if true {
		toSerialize["endTime"] = o.EndTime
	}
	return json.Marshal(toSerialize)
}

type NullableCarbonIntensityBatchDTO struct {
	value *CarbonIntensityBatchDTO
	isSet bool
}

func (v NullableCarbonIntensityBatchDTO) Get() *CarbonIntensityBatchDTO {
	return v.value
}

func (v *NullableCarbonIntensityBatchDTO) Set(val *CarbonIntensityBatchDTO) {
	v.value = val
	v.isSet = true
}

func (v NullableCarbonIntensityBatchDTO) IsSet() bool {
	return v.isSet
}

func (v *NullableCarbonIntensityBatchDTO) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCarbonIntensityBatchDTO(val *CarbonIntensityBatchDTO) *NullableCarbonIntensityBatchDTO {
	return &NullableCarbonIntensityBatchDTO{value: val, isSet: true}
}

func (v NullableCarbonIntensityBatchDTO) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCarbonIntensityBatchDTO) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


